head(nc)
nc$mage
head(nc)
subset(nc, is.na(weight))
head(nc)
subset(nc, is.na(gain))
subset(nc, is.na(gained))
nrow(subset(nc, is.na(gained)))
head(nc)
nc$habit
nc$weight
subset(nc, habit == 'smoker')
smoker <- subset(nc, habit == 'smoker')
nonsmoker <- subset(nc, habit == 'nonsmoker')
nonsmoker <- subset(nc, habit == 'nonsmoker')
nonsmoker
smoker$weight
nonsmoker$weight
boxplot(smoker$weight, nonsmoker$weight)
hist(smoker$weight, nonsmoker$weight)
hist(smoker$weight)
hist(nonsmoker$weight)
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median", boot_method = "se")
source("http://bit.ly/dasi_inference")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median", boot_method = "se")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
head(nc)
head(nc$mature)
nc$mature
subset(nc, mature == "mature mom")
subset(nc, mature == "mature mom")$mage
min(subset(nc, mature == "mature mom")$mage)
max(subset(nc, mature == "younger mom")$mage)
load(url("http://bit.ly/dasi_gss_ws_cl"))
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht", alternative = "greater", method = "theoretical")
read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',')
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',')
head(input)
plot(input$V1, input$V2, col = input$V3)
plot(input$V1, input$V2)
head(input)
input$V1
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
plot(input$V1, input$V2)
plot(input$V1, input$V2, input$V3)
plot(input$V1, input$V2, col = input$V3)
plot(input$V1, input$V2)
head(input)
plot(input$V1, input$V2, col = input$V3)
plot(input$V1, input$V2, col = input$V3)
head(input)
input2 <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = TRUE)
input$V3 <- input2$V3
plot(input$V1, input$V2, col = input$V3)
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
input2 <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = TRUE)
input$V3 <- input2$V3
plot(input$V1, input$V2, col = input$V3)
rm(list = ls())
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
input
input$V3 == 1
sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input$V3 <- colors
plot(input$V1, input$V2, col = input$V3)
plot(input$V1, input$V2, col = input$V3, pch=16)
plot(input$V1, input$V2, col = input$V3, pch=16, cex=0.4)
plot(input$V1, input$V2, col = input$V3, pch=16, cex=0.6)
plot(input$V1, input$V2, col = input$V3, pch=16, cex=0.8)
plot(input$V1, input$V2, col = input$V3, pch=16)
source('~/cousera-ml/logistic-regression/logisticRegression.R')
head(input)
xMatrix <- cbind(input$V1, input$V2)
xMatrix
myData <- cbind(input$V1, input$V2)
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
myMatrix
myData <- rbind(c(1, 1), c(1, 2), c(2, 1), c(2.5, 0.2), c(2, 2), c(2, 3), c(3, 2))
plot(myData)
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
myMatrix
head(input)
myData <- cbind(as.numeric(input$V1), input$V2)
myData
myData <- cbind(input$V1, input$V2)
myData
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
myMatrix
yVector <-- input$V3
yVector <- input$V3
yVector
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
yVector <- input$V3
yVector
myMatrix
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
yVector
myMatrix
input$V2
input$V2
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
input
myData <- cbind(input$V1, input$V2)
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
myMatrix
rm(list = ls())
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input
input$V3 <- colors
input
plot(input$V1, input$V2, col = input$V3, pch=16)
matrix(input$V1, input$V2)
matrix(c(input$V1, input$V2)
matrix(c(input$V1, input$V2))
matrix(c(input$V1, input$V2))
myData <- cbind(input$V1, input$V2)
myData
input
myData <- cbind(input$V1, input$V2)
myData <- cbind(input$V1, input$V2))
myData <- cbind(input$V1, input$V2))
myData <- cbind(input$V1, input$V2)
myData
input$V1
input$V1
input$V1
rm(list = ls())
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input$V3 <- colors
input
input$V1
as.numeric(input$V1)
myData <- cbind(as.numeric(input$V1), as.numeric(input$V2))
myData
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
yVector <- input$V3
myMatrix
yVector
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
myMatrix
yVector <- input$V3
myMatrix
yVector
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
source('~/cousera-ml/logistic-regression/logisticRegression.R')
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
costs
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.0.1, 10000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.0001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00005, 10000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.0001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00009, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00008, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00007, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00006, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00005, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00002, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 50000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.000015, 20000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 50000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 100000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 200000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 200000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 100000, myMatrix, yVector)
plot(costs)
predicting <- hypothesis(c(-4.578479, 0.04352324, 0.03635591), myMatrix) >= 0.5
predicting <- hypothesis(c(-4.578479, 0.04352324, 0.03635591), myMatrix) >= 0.5
rbind(predicting, yVector)
cbind(predicting, yVector)
predicting <- hypothesis(c(-4.578479, 0.04352324, 0.03635591), myMatrix) >= 0.5
rbind(predicting, yVector)
plot(input$V1, input$V2, col = input$V3, pch=16)
input$V3 <- colors
plot(input$V1, input$V2, col = input$V3, pch=16)
hypothesis(c(-4.578479, 0.04352324, 0.03635591), c(1,70,30)) >= 0.5
hypothesis(c(-4.578479, 0.04352324, 0.03635591), cbind((c1,70,30))) >= 0.5
hypothesis(c(-4.578479, 0.04352324, 0.03635591), cbind(c(1,70,30))) >= 0.5
hypothesis(c(-4.578479, 0.04352324, 0.03635591), c(1,30,40)) >= 0.5
cbind(c(1,30,40))
rbind(c(1,30,40))
as.matrix(rbind(c(1,30,40)))
rrr <- as.matrix(rbind(c(1,30,40)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,100,80)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,70,50)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,70,40)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,70,40)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
rrr <- as.matrix(rbind(c(1,70,45)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
rrr <- as.matrix(rbind(c(1,45,485)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
rrr <- as.matrix(rbind(c(1,45,85)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 150000, myMatrix, yVector)
rrr <- as.matrix(rbind(c(1,45,85)))
hypothesis(c(-6.099932, 0.05508169, 0.04833282), rrr)
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data2.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
input
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input$V3 <- colors
plot(input$V1, input$V2, col = input$V3, pch=16)
rm(list = ls())
source("http://bit.ly/dasi_inference")
rm(list = ls())
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
head(atheism)
subset(atheism, nationality == 'United States')
head(atheism)
subset(atheism, nationality == 'United States' & year == '2012')
us12 <- subset(atheism, nationality == 'United States' & year == '2012')
head(us12)
us12$response
subset(us12, response == 'atheist')
nrow(subset(us12, response == 'atheist'))
nrow(us12)
50/1002
pnorm(0.975)
sqrt(0.0499002*(1-0.0499002)/1002)
pnorm(0.975)
pnorm(0.975) * sqrt(0.0499002*(1-0.0499002)/1002)
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
(0.0634 - 0.0364)/2
p <- 50/1002
n <- nrow(us12)
se <- sqrt( p*(1-p)/n )
se
qnorm(0.975)
qnorm(0.975) * se
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2*sqrt(p*(1 - p)/n)
plot(me ~ p)
subset(atheism, nationality == 'Spain' & year == '2012')
load(url("http://www.openintro.org/stat/data/atheism.RData"))
subset(atheism, nationality == 'Spain' & year == '2012')
head(subset(atheism, nationality == 'Spain' & year == '2012'))
subset(atheism, nationality == 'Spain' & year == '2012')$year
subset(atheism, nationality == 'Spain')$year
spain12 <- subset(atheism, nationality == 'Spain' & year == '2012')
spain05 <- subset(atheism, nationality == 'Spain' & year == '2005')
spain12
spain05
head(spain12)
subset(spain12, response == 'atheist')
nrow(subset(spain12, response == 'atheist'))
nrow(spain12)
103/1145
nrow(subset(spain05, response == 'atheist'))
nrow(spain05)
115/1146
qnorm(p = 0.975)
(0.0899-0.1003) + 1.96*sqrt(  (0.0899*(1-0899)/1145)    +   (0.1003*(1-0.1003)/1146)  )
(0.0899-0.1003) + 1.96*sqrt(  (0.0899*(1-0.0899)/1145)    +   (0.1003*(1-0.1003)/1146)  )
(0.0899-0.1003) - 1.96*sqrt(  (0.0899*(1-0.0899)/1145)    +   (0.1003*(1-0.1003)/1146)  )
spain12 <- subset(atheism, nationality == 'United States' & year == '2012')
spain05 <- subset(atheism, nationality == 'United States' & year == '2005')
spain12
spain05
spain12 <- subset(atheism, nationality == 'United States' & year == '2012')
spain05 <- subset(atheism, nationality == 'United States' & year == '2005')
spain12
us12 <- subset(atheism, nationality == 'United States' & year == '2012')
us05 <- subset(atheism, nationality == 'United States' & year == '2005')
nrow(us05)
nrow(subset(us05, response == 'atheist'))
nrow(us12)
us12 <- subset(atheism, nationality == 'United States' & year == '2012')
nrow(us12)
nrow(subset(us12, response == 'atheist'))
10/1002
50/1002
(0.0499-0.0099) + 1.96 * sqrt(  (0.0499*(1-0.0499)/1002)    + (0.0099*(1-0.0099)/1002)   )
(0.0499-0.0099) - 1.96 * sqrt(  (0.0499*(1-0.0499)/1002)    + (0.0099*(1-0.0099)/1002)   )
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2*sqrt(p*(1 - p)/n)
plot(me ~ p)
n <- 10
me <- 2*sqrt(0.5*(1 - 0.5)/n)
n <- 10
2*sqrt(0.5*(1 - 0.5)/n)
n <- 100
2*sqrt(0.5*(1 - 0.5)/n)
n <- 9604
2*sqrt(0.5*(1 - 0.5)/n)
n <- 2401
2*sqrt(0.5*(1 - 0.5)/n)
n <- 9602
me <- 2*sqrt(0.5*(1 - 0.5)/n)
n <- 9604
me <- 2*sqrt(0.5*(1 - 0.5)/n)
print(me)
p1 <- 493/1037
n1 <- 1037
p2 <- 596/1028
n2 <- 1028
sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2)
qnorm(0.975)
qt(0.975, 25)
digits[1,]
setwd('/home/nozes/github-machine-learning-coursera/exercise3')
digits = read.csv2('input/data1.txt', sep=',', stringsAsFactors = FALSE, header = FALSE, colClasses = "numeric", dec=".")
digits[1,]
oneDigit <- matrix(digits[1,], ncol = 40)
oneDigit
image(oneDigit)
heat(oneDigit)
image(oneDigit)
oneDigit
class(oneDigit)
image(oneDigit)
oneDigit
nrow(oneDigit)
digits = read.csv2('input/data1.txt', sep=',', stringsAsFactors = FALSE, header = FALSE, colClasses = "numeric", dec=".")
oneDigit <- matrix(digits[1,], ncol = 20)
image(oneDigit)
oneDigit
image(oneDigit)
class(oneDigit)
image(oneDigit)
image(x = oneDigit)
image(z = oneDigit)
m = matrix(runif(100), 10, 10)
image(m)
m
oneDigit <- matrix(digits[1,], ncol = 20)
oneDigit
image(oneDigit)
m = matrix(runif(100), 10, 10)
image(m)
m
m[10,10] <- -0.1
image(m)
m = matrix(runif(100), 10, 10)
m[10,10] <- -0.1
m
image(m)
oneDigit <- matrix(digits[2,], ncol = 20)
class(oneDigit)
image(oneDigit)
oneDigit
oneDigit <- matrix(digits[1,], 20, 20)
oneDigit
image(oneDigit)
oneDigit <- matrix(digits[100,], 20, 20)
image(oneDigit)
?image
image(oneDigit)
image(oneDigit)
oneDigit
oneDigit[1,]
oneDigit[1,]
matrix(digits[100, ], ncol = 20)
image(matrix(digits[100, ], ncol = 20))
xx <- matrix(digits[100, ], ncol = 20)
xx[1,]
class(x)
class(x[1,])
class(xx[1,])
class(xx[1,1])
digits[100, ]
digits[100, ]
digits[100, ][1]
digits[100, ]
c(digits[100, ])
head(digits)
head(digits[1,])
digits[1,]
digits[1,1]
digits[1,]
maxtrix(digits[1,], ncol=20)
matrix(digits[1,], ncol=20)
matrix(digits[1,], ncol=20)[1,1]
class(matrix(digits[1,], ncol=20)[1,1])
class(matrix(digits[1,], ncol=20)[1,1])[1]
xx
class(xx[1,1])
xx[1,1]
xx[1,1][1]
xx[1,1][1][1]
digits = read.csv2('input/data1.txt', sep=',', stringsAsFactors = FALSE, header = FALSE)
digits[1,]
class(digits[1,])
class(digits[1,1])
matrix(digits[1,], ncol = 20)
as.numeric(matrix(digits[1,], ncol = 20))
vai <- as.numeric(matrix(digits[1,], ncol = 20))
image(vai)
vai
as.matrix(vai)
as.matrix(vai, ncol=20)
vai
matrix(vai, ncol=20)
matrix(vai, ncol=20)[1,1]
image(matrix(vai, ncol=20))
rm(list = ls())
setwd('/home/nozes/github-machine-learning-coursera/exercise3')
digits = read.csv2('input/data1.txt', sep=',', stringsAsFactors = FALSE, header = FALSE)
digit <- matrix(as.numeric(matrix(digits[1,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 500
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 1000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 2000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 8000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 5000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 2000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- #000
indexNumber <- #000
indexNumber <- 3000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 3001
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 3002
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 3004
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
indexNumber <- 3008
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
image(digit)
image(t(digit)
image(t(digit))
image(t(digit))
image(rotate(digit))
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
indexNumber <- 4008
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
source('~/github-machine-learning-coursera/exercise2/function-definitions2.R')
source('~/github-machine-learning-coursera/exercise2/function-definitions2_2.R')
source('~/github-machine-learning-coursera/exercise2/function-definitions2_2.R')
source('~/github-machine-learning-coursera/exercise2/function-definitions2_2.R')
digits = read.csv2('input/data1.txt', sep=',', stringsAsFactors = FALSE, header = FALSE)
as.numeric(digits)
as.numeric(digits[1,])
digits[1,]
