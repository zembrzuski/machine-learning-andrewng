head(input)
myData <- cbind(as.numeric(input$V1), input$V2)
myData
myData <- cbind(input$V1, input$V2)
myData
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
myMatrix
yVector <-- input$V3
yVector <- input$V3
yVector
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
yVector <- input$V3
yVector
myMatrix
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
yVector
myMatrix
input$V2
input$V2
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
input
myData <- cbind(input$V1, input$V2)
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
myMatrix
rm(list = ls())
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input
input$V3 <- colors
input
plot(input$V1, input$V2, col = input$V3, pch=16)
matrix(input$V1, input$V2)
matrix(c(input$V1, input$V2)
matrix(c(input$V1, input$V2))
matrix(c(input$V1, input$V2))
myData <- cbind(input$V1, input$V2)
myData
input
myData <- cbind(input$V1, input$V2)
myData <- cbind(input$V1, input$V2))
myData <- cbind(input$V1, input$V2))
myData <- cbind(input$V1, input$V2)
myData
input$V1
input$V1
input$V1
rm(list = ls())
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input$V3 <- colors
input
input$V1
as.numeric(input$V1)
myData <- cbind(as.numeric(input$V1), as.numeric(input$V2))
myData
myMatrix <- cbind(rep(1, length(nrow(myData))), myData)
yVector <- input$V3
myMatrix
yVector
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data1.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
myMatrix
yVector <- input$V3
myMatrix
yVector
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
source('~/cousera-ml/logistic-regression/logisticRegression.R')
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
costs
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.01, 10000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.0.1, 10000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.0001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00005, 10000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.0001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00009, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00008, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00007, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00006, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00005, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00002, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 10000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 50000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.000015, 20000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 50000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 100000, myMatrix, yVector)
plot(costs)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 200000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 200000, myMatrix, yVector)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 100000, myMatrix, yVector)
plot(costs)
predicting <- hypothesis(c(-4.578479, 0.04352324, 0.03635591), myMatrix) >= 0.5
predicting <- hypothesis(c(-4.578479, 0.04352324, 0.03635591), myMatrix) >= 0.5
rbind(predicting, yVector)
cbind(predicting, yVector)
predicting <- hypothesis(c(-4.578479, 0.04352324, 0.03635591), myMatrix) >= 0.5
rbind(predicting, yVector)
plot(input$V1, input$V2, col = input$V3, pch=16)
input$V3 <- colors
plot(input$V1, input$V2, col = input$V3, pch=16)
hypothesis(c(-4.578479, 0.04352324, 0.03635591), c(1,70,30)) >= 0.5
hypothesis(c(-4.578479, 0.04352324, 0.03635591), cbind((c1,70,30))) >= 0.5
hypothesis(c(-4.578479, 0.04352324, 0.03635591), cbind(c(1,70,30))) >= 0.5
hypothesis(c(-4.578479, 0.04352324, 0.03635591), c(1,30,40)) >= 0.5
cbind(c(1,30,40))
rbind(c(1,30,40))
as.matrix(rbind(c(1,30,40)))
rrr <- as.matrix(rbind(c(1,30,40)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,100,80)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,70,50)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,70,40)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr) >= 0.5
rrr <- as.matrix(rbind(c(1,70,40)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
rrr <- as.matrix(rbind(c(1,70,45)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
rrr <- as.matrix(rbind(c(1,45,485)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
rrr <- as.matrix(rbind(c(1,45,85)))
hypothesis(c(-4.578479, 0.04352324, 0.03635591), rrr)
costs <- gradient(c(0.5, 0.5, 0.5), 0.00001, 150000, myMatrix, yVector)
rrr <- as.matrix(rbind(c(1,45,85)))
hypothesis(c(-6.099932, 0.05508169, 0.04833282), rrr)
input <- read.csv2('/home/nozes/Desktop/ml2/ex2/ex2data2.txt' , header = FALSE, sep = ',', stringsAsFactors = FALSE)
input
colors <- sapply(input$V3, function(x){
if (x == 0) {
return("red")
} else {
return("blue")
}
})
input$V3 <- colors
plot(input$V1, input$V2, col = input$V3, pch=16)
rm(list = ls())
source("http://bit.ly/dasi_inference")
rm(list = ls())
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
head(atheism)
subset(atheism, nationality == 'United States')
head(atheism)
subset(atheism, nationality == 'United States' & year == '2012')
us12 <- subset(atheism, nationality == 'United States' & year == '2012')
head(us12)
us12$response
subset(us12, response == 'atheist')
nrow(subset(us12, response == 'atheist'))
nrow(us12)
50/1002
pnorm(0.975)
sqrt(0.0499002*(1-0.0499002)/1002)
pnorm(0.975)
pnorm(0.975) * sqrt(0.0499002*(1-0.0499002)/1002)
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
(0.0634 - 0.0364)/2
p <- 50/1002
n <- nrow(us12)
se <- sqrt( p*(1-p)/n )
se
qnorm(0.975)
qnorm(0.975) * se
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2*sqrt(p*(1 - p)/n)
plot(me ~ p)
subset(atheism, nationality == 'Spain' & year == '2012')
load(url("http://www.openintro.org/stat/data/atheism.RData"))
subset(atheism, nationality == 'Spain' & year == '2012')
head(subset(atheism, nationality == 'Spain' & year == '2012'))
subset(atheism, nationality == 'Spain' & year == '2012')$year
subset(atheism, nationality == 'Spain')$year
spain12 <- subset(atheism, nationality == 'Spain' & year == '2012')
spain05 <- subset(atheism, nationality == 'Spain' & year == '2005')
spain12
spain05
head(spain12)
subset(spain12, response == 'atheist')
nrow(subset(spain12, response == 'atheist'))
nrow(spain12)
103/1145
nrow(subset(spain05, response == 'atheist'))
nrow(spain05)
115/1146
qnorm(p = 0.975)
(0.0899-0.1003) + 1.96*sqrt(  (0.0899*(1-0899)/1145)    +   (0.1003*(1-0.1003)/1146)  )
(0.0899-0.1003) + 1.96*sqrt(  (0.0899*(1-0.0899)/1145)    +   (0.1003*(1-0.1003)/1146)  )
(0.0899-0.1003) - 1.96*sqrt(  (0.0899*(1-0.0899)/1145)    +   (0.1003*(1-0.1003)/1146)  )
spain12 <- subset(atheism, nationality == 'United States' & year == '2012')
spain05 <- subset(atheism, nationality == 'United States' & year == '2005')
spain12
spain05
spain12 <- subset(atheism, nationality == 'United States' & year == '2012')
spain05 <- subset(atheism, nationality == 'United States' & year == '2005')
spain12
us12 <- subset(atheism, nationality == 'United States' & year == '2012')
us05 <- subset(atheism, nationality == 'United States' & year == '2005')
nrow(us05)
nrow(subset(us05, response == 'atheist'))
nrow(us12)
us12 <- subset(atheism, nationality == 'United States' & year == '2012')
nrow(us12)
nrow(subset(us12, response == 'atheist'))
10/1002
50/1002
(0.0499-0.0099) + 1.96 * sqrt(  (0.0499*(1-0.0499)/1002)    + (0.0099*(1-0.0099)/1002)   )
(0.0499-0.0099) - 1.96 * sqrt(  (0.0499*(1-0.0499)/1002)    + (0.0099*(1-0.0099)/1002)   )
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2*sqrt(p*(1 - p)/n)
plot(me ~ p)
n <- 10
me <- 2*sqrt(0.5*(1 - 0.5)/n)
n <- 10
2*sqrt(0.5*(1 - 0.5)/n)
n <- 100
2*sqrt(0.5*(1 - 0.5)/n)
n <- 9604
2*sqrt(0.5*(1 - 0.5)/n)
n <- 2401
2*sqrt(0.5*(1 - 0.5)/n)
n <- 9602
me <- 2*sqrt(0.5*(1 - 0.5)/n)
n <- 9604
me <- 2*sqrt(0.5*(1 - 0.5)/n)
print(me)
p1 <- 493/1037
n1 <- 1037
p2 <- 596/1028
n2 <- 1028
sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2)
qnorm(0.975)
qt(0.975, 25)
exit
indexNumber <- 1
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
setwd('/home/nozes/github-machine-learning-coursera/exercise3')
digits = read.csv2('input/data1.txt', sep=',', stringsAsFactors = FALSE, header = FALSE)
as.numeric(digits[1,])
indexNumber <- 1
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
indexNumber <- 2
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
indexNumber <- 5000
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
indexNumber <- 500
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
indexNumber <- 501
digit <- matrix(as.numeric(matrix(digits[indexNumber,], ncol = 20)), ncol=20)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(digit))
nrow(digits)
for(i in 1:nrow(digits)) {
cao <- as.numeric(digits[i,])
}
for(i in 1:nrow(digits)) {
cao <- as.numeric(digits[i,])
print(i)
}
?matrix
newDigits <- matrix(nrow = 5000, ncol=40)
newDigits <- matrix(nrow = 5000, ncol=40)
for(i in 1:nrow(digits)) {
newDigits[i, ] <- as.numeric(digits[i,])
print(i)
}
as.matrix(sapply(digits, as.numeric))
digits[1,1]
class(digits[1,1])
class(digits[1,20])
x <- digits
y = read.csv2('input/y.txt', sep=',', stringsAsFactors = FALSE, header = FALSE)
y
head(y)
y <- y$V1
y
y
y == 10
sapply(y, function(x){
if (x == 10) {
return(1)
} else {
return(0)
}
})
yResult <- sapply(y, function(x){
if (x == 10) {
return(1)
} else {
return(0)
}
})
theta <- rep(0, 40)
lambda <- 1
costs <- gradientDescent(x, yResult, theta, 0.05, 40000, lambda)
source('~/github-machine-learning-coursera/exercise2/function-definitions2_2.R')
costs <- gradientDescent(x, yResult, theta, 0.05, 40000, lambda)
head(x)
class(x)
as.matrix(x)
xxx <- as.matrix(x)
head(xxx)
xxx <- as.matrix(sapply(x, as.numeric))
head(xxx)
costs <- gradientDescent(x, yResult, theta, 0.05, 40000, lambda)
xxx[1,]
xxx[1,1]
class(xxx[1,1])
costs <- gradientDescent(xxx, yResult, theta, 0.05, 40000, lambda)
nrow(xxx)
length(xxx)
head(xxx)
length(xxx[1,])
length(yResult)
theta <- rep(0, 400)
costs <- gradientDescent(xxx, yResult, theta, 0.05, 40000, lambda)
costs <- gradientDescent(xxx, yResult, theta, 0.05, 500, lambda)
costs <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
plot(costs)
costs <- gradientDescent(xxx, yResult, theta, 0.05, 100, lambda)
plot(costs)
costs <- gradientDescent(xxx, yResult, theta, 0.05, 200, lambda)
plot(costs)
costs <- gradientDescent(xxx, yResult, theta, 0.05, 300, lambda)
plot(costs)
source('~/github-machine-learning-coursera/exercise2/function-definitions2_2.R')
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 300, lambda)
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 300, lambda)
thetasDigitZero
thetas[3]
thetasDigitZero[3]
prediction <- (hypothesis(thetasDigitZero, x)[1,] > 0.5)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
prediction
yResult
realAnswer <- (y == 1)
realAnswer
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 400, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
prediction
hypothesis(thetasDigitZero, xxx)[1,]
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.3)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.1)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.4)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.6)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
y
yResult <- sapply(y, function(x){
if (x == 1) {
return(1)
} else {
return(0)
}
})
yResult
theta <- rep(0, 400)
lambda <- 1
xxx <- as.matrix(sapply(x, as.numeric))
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.6)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
yResult <- sapply(y, function(x){
if (x == 2) {
return(1)
} else {
return(0)
}
})
theta <- rep(0, 400)
lambda <- 1
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.6)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
yResult <- sapply(y, function(x){
if (x == 9) {
return(1)
} else {
return(0)
}
})
theta <- rep(0, 400)
lambda <- 1
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.6)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
yResult
prediction
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
prediction
theta <- rep(0, 400)
yResult
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
prediction
yResult <- sapply(y, function(x){
if (x == 10) {
return(1)
} else {
return(0)
}
})
yResult
theta <- rep(0, 400)
lambda <- 1
xxx
thetasDigitZero <- gradientDescent(xxx, yResult, theta, 0.05, 50, lambda)
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.5)
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
comparison
prediction
prediction
head(prediction, 500)
prediction
head(prediction, 500)
head(prediction, 500) == TRUE
subset(head(prediction, 500), TRUE)
subset(head(prediction, 500), head(prediction, 500) == TRUE)
length(subset(head(prediction, 500), head(prediction, 500) == TRUE))
prediction <- (hypothesis(thetasDigitZero, xxx)[1,] > 0.3)
length(subset(head(prediction, 500), head(prediction, 500) == TRUE))
realAnswer <- (y == 1)
comparison <- prediction == realAnswer
accuracy <- length(comparison[comparison == TRUE]) / length(comparison)
paste('accuracy: ', accuracy)
prediction
o
length(subset(head(prediction, 500), head(prediction, 500) == TRUE))
length(subset(head(prediction, 500), head(prediction, 500) == TRUE))/500
