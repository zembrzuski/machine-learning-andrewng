clusters == 1
which(clusters == 1)
which(clusters == 2)
which(clusters == 1)
X[which(clusters == 1),]
X[which(clusters == 2),]
X[which(clusters == 1),]
colSums(X[which(clusters == 1),])
colSums(clusterPoints)
clusterPoints <- X[which(clusters == 1),]
colSums(clusterPoints)
1/nrow(clusterPoints) * colSums(clusterPoints)
matrix(nrow=2, ncol=3)
computeCentroids <- function(X, numberOfCentroids) {
newCentroids <- matrix(nrow=numberOfCentroids, ncol=2)
for(i in 1:numberOfCentroids) {
clusterPoints <- X[which(clusters == i),]
newCentroids[i,] <- 1/nrow(clusterPoints) * colSums(clusterPoints)
}
newCentroids
}
computeCentroids <- function(X, clusters) {
newCentroids <- matrix(nrow=length(clusters), ncol=2)
for(i in 1:length(clusters)) {
clusterPoints <- X[which(clusters == i),]
newCentroids[i,] <- 1/nrow(clusterPoints) * colSums(clusterPoints)
}
newCentroids
}
computeCentroids(X, clusters)
computeCentroids <- function(X, clusters, numberOfCentroids) {
newCentroids <- matrix(nrow=numberOfCentroids, ncol=2)
for(i in 1:numberOfCentroids) {
clusterPoints <- X[which(clusters == i),]
newCentroids[i,] <- 1/nrow(clusterPoints) * colSums(clusterPoints)
}
newCentroids
}
computeCentroids(X, clusters, 2)
X
X[sample(nrow(X)),]
X[sample(2),]
X[sample(2),]
1:nrow(X)
sample(1:nrow(X))
sample(1:nrow(X))
sample(1:nrow(X))[1:2]
sample(1:nrow(X))[1:2]
sample(1:nrow(X))[1:2]
sample(1:nrow(X))[1:2]
sample(1:nrow(X))[1:2]
sample(1:nrow(X))[1:2]
sample(1:nrow(X))[1:2]
numberOfCentroids <- 3
sample(1:nrow(X))[1:numberOfCentroids]
sample(1:nrow(X))[1:numberOfCentroids]
sample(1:nrow(X))[1:numberOfCentroids]
X[sample(1:nrow(X))[1:numberOfCentroids],]
X[sample(1:nrow(X))[1:numberOfCentroids],]
X[sample(1:nrow(X))[1:numberOfCentroids],]
X[sample(1:nrow(X))[1:numberOfCentroids],]
X[sample(1:nrow(X))[1:numberOfCentroids],]
X[sample(1:nrow(X))[1:numberOfCentroids],]
kMeansInitCentroids <- function(X, numberOfCentroids) {
X[sample(1:nrow(X))[1:numberOfCentroids],]
}
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
rm(list = ls())
setwd('/home/nozes/github-machine-learning-coursera/exercise7')
source('input/kmeans-functions.R')
source('kmeans-functions.R')
read.csv('input/data1.txt', header=FALSE, sep=' ')
read.csv('input/data1.txt', header=FALSE, sep=' ')
X <- read.csv('input/data1.txt', header=FALSE, sep=' ')
plot(X)
X <- read.csv('input/data1.txt', header=FALSE, sep=' ')
plot(X)
X <- read.csv('input/data2.txt', header=FALSE, sep=' ')
plot(X)
X <- read.csv('input/data2.txt', header=FALSE, sep=' ')
plot(X)
kMeansInitCentroids(X, 3)
findClosestCentroids(X, kMeansInitCentroids())
findClosestCentroids(X, kMeansInitCentroids(X, 3))
kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
foo <- kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
foo <- kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
findClosestCentroids(X, foo)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
findClosestCentroids(X, foo)
class(X[1,1])
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
foo <- kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
findClosestCentroids(X, foo)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
foo <- kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
findClosestCentroids(X, foo)
findClosestCentroids(X, foo)
findClosestCentroids(X, foo)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
foo <- kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
print(class(centroids))
as.matrix(centroids)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
findClosestCentroids(X, foo)
class(foo)
as.matrix(foo)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
findClosestCentroids(X, foo)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
foo <- kMeansInitCentroids(X, 3)
as.matrix(foo)
findClosestCentroids(X, foo)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
findClosestCentroids(X, foo)
class(foo)
print(foo)
class(X)
as.matrix(X)
X <- as.matrix(X)
findClosestCentroids(X, foo)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
rm(list = ls())
setwd('/home/nozes/github-machine-learning-coursera/exercise7')
source('kmeans-functions.R')
X <- as.matrix(read.csv('input/data2.txt', header=FALSE, sep=' '))
plot(X)
foo <- kMeansInitCentroids(X, 3)
findClosestCentroids(X, foo)
centroids <- findClosestCentroids(X, foo)
computeCentroids(X, cluster, numberOfCentroids)
numberOfCentroids <- 3
computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, foo)
computeCentroids(X, cluster, numberOfCentroids)
rm(list = ls())
setwd('/home/nozes/github-machine-learning-coursera/exercise7')
source('kmeans-functions.R')
X <- as.matrix(read.csv('input/data2.txt', header=FALSE, sep=' '))
plot(X)
numberOfCentroids <- 3
centroids <- kMeansInitCentroids(X, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
print(centroids)
cluster <- findClosestCentroids(X, centroids)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
print(centroids)
cluster <- findClosestCentroids(X, centroids)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
print(centroids)
cluster <- findClosestCentroids(X, centroids)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
print(centroids)
numberOfCentroids <- 3
centroids <- kMeansInitCentroids(X, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
print(centroids)
cluster <- findClosestCentroids(X, centroids)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
print(centroids)
plot(X, colour = cluster)
plot(X, color = cluster)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
numberOfCentroids <- 3
centroids <- kMeansInitCentroids(X, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
point1 <- floor(runif(2, min=0, max=11))
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
cluster <- findClosestCentroids(X, centroids)
plot(X, col = cluster)
centroids <- computeCentroids(X, cluster, numberOfCentroids)
rep(1,3)
rep(1,3) == rep(1,3)
rep(1:3) == rep(1:3)
all(rep(1:3) == rep(1:3))
all(rep(1:3) == rep(2:3))
all(rep(1,3) == rep(2,3))
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
rep(0,3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
n
n
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
X <- as.matrix(read.csv('input/data1.txt', header=FALSE, sep=' '))
plot(X)
knn(X, 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
1:3
1:3 == rep(1,3)
all(1:3 == rep(1,3))
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
X <- as.matrix(read.csv('input/data2.txt', header=FALSE, sep=' '))
plot(X)
knn(X, 3)
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
debugSource('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
knn(X, 3)
knn(X, 3)
knn(X, 3)
knn(X, 3)
knn(X, 3)
X[,1]
plot(X[,1])
X[,1]
rbind(X[,1])
cbind(X[,1])
plot(cbind(X[,1]))
knn(plot(cbind(X[,1])), 3)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
rm(list = ls())
setwd('/home/nozes/github-machine-learning-coursera/exercise7')
source('kmeans-functions.R')
X <- as.matrix(read.csv('input/data2.txt', header=FALSE, sep=' '))
knn(X, 3)
knn(X, 3)
knn(X, 3)
knn(X, 3)
knn(X, 3)
knn(X, 3)
library(pixmap)
install.packages('pixmap')
library(pixmap)
library(png)
install.packages('png')
library(png)
readPNG('input/bird_small.png')
bird <- readPNG('input/bird_small.png')
head(bird)
summary(bird)
bird[1,]
bird[1,1]
bird[1,1m]
bird[1,1,]
bird[,,1]
dim(bird[,,1])
red <- bird[,,1]
green <- bird[,,2]
blue <- bird[,,3]
dim(red)
dim(green)
dim(blue)
writePNG(bird)
plotRGB(b)
library(raster)
install.packages('raster')
library(raster)
plotRGB(bird)
plotRGB(bird, r=3, g=2, b=1)
writePNG(bird)
setwd('/home/nozes/github-machine-learning-coursera/exercise7')
writePNG(bird)
writePNG(bird, target=raw())
rasterImage(bird)
rasterImage(bird, 1.2, 1.27, 1.8, 1.73)
plot(1:2, type='n')
rasterImage(bird, 1.2, 1.27, 1.8, 1.73)
plot(1:2, type='n')
rasterImage(bird, 1.2, 1.27, 1.8, 1.73)
dim(red)
class(red)
matrix(data = rep(0, 128*128), nrow=128)
dim(matrix)
foo <- matrix(data = rep(0, 128*128), nrow=128)
dim(foo)
writePNG(bird)
bird[,,1] <- foo
plot(1:2, type='n')
rasterImage(bird, 1.2, 1.27, 1.8, 1.73)
bird <- readPNG('input/bird_small.png')
setwd('/home/nozes/github-machine-learning-coursera/exercise7')
source('kmeans-functions.R')
bird <- readPNG('input/bird_small.png')
bird <- readPNG('input/bird_small.png')
plot(1:2, type='n')
rasterImage(bird, 1.2, 1.27, 1.8, 1.73)
X <- cbind(red, green, blue)
dim(red)
c(red)
length(c(red))
length(c(red)) == 128*128
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
X <- cbind(c(red), c(green), c(blue))
knn(X, 16)
knn(X, 16)
cluster <- knn(X, 16)
TRUE || FALSE
FALSE || FALSE
FALSE || TRUE
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
cluster <- knn(X, 16)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
cluster <- knn(X, 16)
cluster
length(cluster)
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
X <- cbind(c(red), c(green), c(blue))
cluster <- knn(X, 16)
print(head(cluster))
print(tail(cluster))
source('~/github-machine-learning-coursera/exercise7/kmeans-functions.R')
X <- cbind(c(red), c(green), c(blue))
cluster <- knn(X, 16)
myColors <-
cbind(
c(0.86513792, 0.71774791, 0.46023768),
c(0.08159706, 0.08840137, 0.07808145),
c(0.82020352, 0.73731695, 0.72639613),
c(0.14874466, 0.15394778, 0.14580173),
c(0.75523210, 0.60625627, 0.34445235),
c(0.67686012, 0.60733106, 0.54879202),
c(0.96345316, 0.85931373, 0.63301821),
c(0.36383784, 0.34140425, 0.35832795),
c(0.55853429, 0.46636616, 0.41160694),
c(0.92068311, 0.58107211, 0.26357527),
c(0.97558222, 0.94479366, 0.81820981),
c(0.47230392, 0.34558370, 0.20297295),
c(0.57379166, 0.72686194, 0.87089486),
c(0.39875506, 0.47195767, 0.66756925),
c(0.66205859, 0.47662106, 0.20584003),
c(0.26301490, 0.23328013, 0.22124183)
)
myColors
myColors <-
rbind(
c(0.86513792, 0.71774791, 0.46023768),
c(0.08159706, 0.08840137, 0.07808145),
c(0.82020352, 0.73731695, 0.72639613),
c(0.14874466, 0.15394778, 0.14580173),
c(0.75523210, 0.60625627, 0.34445235),
c(0.67686012, 0.60733106, 0.54879202),
c(0.96345316, 0.85931373, 0.63301821),
c(0.36383784, 0.34140425, 0.35832795),
c(0.55853429, 0.46636616, 0.41160694),
c(0.92068311, 0.58107211, 0.26357527),
c(0.97558222, 0.94479366, 0.81820981),
c(0.47230392, 0.34558370, 0.20297295),
c(0.57379166, 0.72686194, 0.87089486),
c(0.39875506, 0.47195767, 0.66756925),
c(0.66205859, 0.47662106, 0.20584003),
c(0.26301490, 0.23328013, 0.22124183)
)
myColors
X[1,1]
X[1]
cluster[1]
cluster[10]
cluster[1000]
dim(cluster)
length(cluster)
129/128
for(i in 1:128) {
for(j in 1:128) {
print(i*128 + j)
}
}
length(cluster)
for(i in 1:128) {
for(j in 1:128) {
print((i-1)*128 + j)
}
}
length(cluster)
for(i in 1:128) {
for(j in 1:128) {
print((i-1)*128 + j)
Sys.sleep(2)
}
}
dim(red)
cluster[1]
cluster[1000]
myColors
myColors[cluster[1000]]
myColors[cluster[1000],]
for(i in 1:128) {
for(j in 1:128) {
index <- (i-1)*128 + j
red[i, j] <- myColors[cluster[index],1]
green[i, j] <- myColors[cluster[index],2]
blue[i, j] <- myColors[cluster[index],3]
}
}
bird[,,1] <- red
bird[,,2] <- green
bird[,,3] <- blue
plot(1:2, type='n')
rasterImage(bird, 1.2, 1.27, 1.8, 1.73)
